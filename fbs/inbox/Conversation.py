# automatically generated by the FlatBuffers compiler, do not modify

# namespace: inbox

import flatbuffers

class Conversation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsConversation(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Conversation()
        x.Init(buf, n + offset)
        return x

    # Conversation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Conversation
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # Conversation
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Conversation
    def DidJoin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # Conversation
    def HasActiveTrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # Conversation
    def UnreadCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conversation
    def MemberCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conversation
    def LastMessage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Message import Message
            obj = Message()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ConversationStart(builder): builder.StartObject(7)
def ConversationAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def ConversationAddType(builder, type): builder.PrependInt8Slot(1, type, 0)
def ConversationAddDidJoin(builder, didJoin): builder.PrependBoolSlot(2, didJoin, 0)
def ConversationAddHasActiveTrade(builder, hasActiveTrade): builder.PrependBoolSlot(3, hasActiveTrade, 0)
def ConversationAddUnreadCount(builder, unreadCount): builder.PrependInt32Slot(4, unreadCount, 0)
def ConversationAddMemberCount(builder, memberCount): builder.PrependInt32Slot(5, memberCount, 0)
def ConversationAddLastMessage(builder, lastMessage): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(lastMessage), 0)
def ConversationEnd(builder): return builder.EndObject()
